Q: What is callback?
A: A callback is a function called at the completion of a given task.
   Node.js (or JavaScript) is a single-threaded, event-driven language. 
   This means that we can attach listeners to events, and when a said event fires, the listener executes the Method/callback we provided.

Q: What is an error-first callback?
A: Error-first callbacks are used to pass errors and data as well. You have to pass the error as the first parameter, and it has to be checked to see if something went wrong. Additional arguments are used to pass data.

Q: How can you avoid callback hells?
A: There are lots of ways to solve the issue of callback hells:

    modularization: break callbacks into independent functions
    use a control flow library, like async
    use generators with Promises
    
Q: What are Promises?
A: Promises are chainable concurrency primitive that acts as placeholder for a future value.
          
      new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve('result')
        }, 100)
      })
        .then(console.log)
        .catch(console.error)

